---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: myspeed
  namespace: myspeed
spec:
  interval: 15m
  chart:
    spec:
      chart: myspeed
      version: 1.2.1
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 30m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false  
  values:
    env:
      PROMETHEUS_ENABLED: "true"
    global:
      stopAll: false
    metrics:
      main:
        enabled: true
        type: "servicemonitor"
        endpoints:
          - port: main
            path: /api/prometheus/metrics
        targetSelector: main
        prometheusRule:
          enabled: false    
    ingress:
      main:
        enabled: true
        ingressClassName: internal
        integrations:
          homepage:
            enabled: true
            group: Apps
          certManager:
            enabled: true
            certificateIssuer: domain-0-le-prod
        hosts:
          - host: myspeed.${DOMAIN_0}
    credentials:
      s3:
        type: s3
        url: "${S3URL}"
        bucket: "${S3PREFIX}-myspeed"
        accessKey: "${S3ID}"
        secretKey: "${S3KEY}"
        encrKey: "${S3KEY}"
    persistence:
      data:
        volsync:
          - name: data
            type: restic
            credentials: s3
            dest:
              enabled: true
              cacheCapacity: 10Gi
            src:
              enabled: true
              cacheCapacity: 10Gi
              schedule: 40 23 * * *
    podOptions:
      initContainers:
        - name: restore-sqlite
          image: alpine:3.19
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              apk add sqlite
              DB="/myspeed/data/storage.db"
              restore_if_exists() {
                table="$1"
                backup="${table}_backup"
                if sqlite3 "$DB" ".tables" | grep -q "^$backup$"; then
                  echo "Restoring $backup to $table"
                  sqlite3 "$DB" "DROP TABLE IF EXISTS $table;"
                  sqlite3 "$DB" "ALTER TABLE $backup RENAME TO $table;"
                fi
              }
              if [ -f "$DB" ]; then
                restore_if_exists recommendations
                restore_if_exists speedtests
                restore_if_exists integration_data
                restore_if_exists config
              fi
          volumeMounts:
            - name: data
              mountPath: /myspeed/data
